import{_ as s,c as a,b as p,o as e}from"./app-DyBO3kfI.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="链表中指针的一些用法要点" tabindex="-1"><a class="header-anchor" href="#链表中指针的一些用法要点"><span>链表中指针的一些用法要点</span></a></h1><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">/* 结构体不能含有同类型的结构，但是可以含有指向同类型结构的指针。这样的定义是定义一个链表的基础。 */</span><span class="token number">1</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> Element<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span></span>
<span class="line">     Element e<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//这里只是声明了一个名为next的指针，指针本身也占内存空间，里面存放的始终是地址。 struct node* 表示指针的类型是 struct node，即指向的地址里存放的是一个结构体 </span></span>
<span class="line"> <span class="token punctuation">}</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>Linklist<span class="token punctuation">;</span>　　<span class="token comment">//LNode等价于struct node; *LinkList 等价于 struct node* </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>等号 = 左右 的 <code>p</code> 和 <code>p-&gt;next</code> 意义不同，要注意甄别；</p></li><li><p><code>pre </code> 单独出现的时候代表一个节点 ，如 <code>head</code>，就代表 <code>head节点</code>；</p></li><li><p><strong>pre在 = 左边</strong> 出现时代表一个<strong>节点</strong>，<strong>pre在= 右边</strong>出现时代表节点<strong>pre的地址</strong>；</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">p <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//节点p指向节点head的地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>p-&gt;next 在= 左边</strong> 出现时代表节点p的<strong>指针域</strong>；<strong>p-&gt;next在 = 右边</strong>出现时代表节点 p 的下一个节点地址（即<strong>下一节点数据域的地址</strong>）；</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//p 的指针域指向原先 pre 节点的下一个节点地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//pre的指针域指向节点 p 的地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>单链表中申请的节点 p 不能使用&quot;p++&quot;操作。p++本身不会出现语法问题，但是并<strong>不会</strong>&quot;从指向p变成指向p的下一个节点&quot; ， 而是**&quot;从指向p的数据域地址变成指向p的指针域地址&quot;** 。</p></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">/**</span>
<span class="line">* 插入元素</span>
<span class="line">*/</span></span>
<span class="line">Linklist <span class="token function">insert</span><span class="token punctuation">(</span>Linklist head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> Element e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>Linklist head<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Linklist p <span class="token operator">=</span> <span class="token punctuation">(</span>Linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请一个新节点</span></span>
<span class="line">    Linklist pre <span class="token operator">=</span> <span class="token punctuation">(</span>Linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请一个新节点</span></span>
<span class="line">    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pre <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//在链表末尾添加新节点</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            pre <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//单链表中申请的节点 p 不能使用&quot;p++&quot;操作。p++本身不会出现语法问题，但是并不会&quot;从指向p变成指向p的下一个节点&quot; ， 而是&quot;从指向p的数据域地址变成指向p的指针域地址&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token comment">//循环结束时，pre已经到达链表末尾</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">        pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在链表中间添加节点 ，插入位置从1开始算</span></span>
<span class="line">        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            pre <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//单链表中申请的节点 p 不能使用&quot;p++&quot;操作。p++本身不会出现语法问题，但是并不会&quot;从指向p变成指向p的下一个节点&quot; ， 而是&quot;从指向p的数据域地址变成指向p的指针域地址&quot;</span></span>
<span class="line">            j<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token comment">//循环结束时，pre是要插入位置的前驱节点</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// p 的指针域指向原先 pre 节点的下一个节点的地址</span></span>
<span class="line">        pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment">// pre的指针域指向节点 p 的地址</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;插入的位置有误！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> head<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const i=s(t,[["render",o]]),r=JSON.parse('{"path":"/article-bug/c/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95%E8%A6%81%E7%82%B9.html","title":"链表中指针的一些用法要点","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1749634927000,"contributors":[{"name":"twoflowers","username":"","email":"1292548615@qq.com","commits":1}],"changelog":[{"hash":"a7ee8813216eb799ca1707cb7c7c5142cb71b5da","time":1749634927000,"email":"1292548615@qq.com","author":"twoflowers","message":"把c语言部分整理完成"}]},"filePathRelative":"article-bug/c/链表中指针的一些用法要点.md"}');export{i as comp,r as data};
