import{_ as e,c as r,b as t,o as s}from"./app-DyBO3kfI.js";const a="/assets/image-9AJAOG68.png",l={};function o(p,n){return s(),r("div",null,n[0]||(n[0]=[t('<h1 id="原码、反码、补码、移码表示范围、浮点数对阶" tabindex="-1"><a class="header-anchor" href="#原码、反码、补码、移码表示范围、浮点数对阶"><span>原码、反码、补码、移码表示范围、浮点数对阶</span></a></h1><p><strong>机器数</strong>：各种数值在计算机中表示的形式，其特点是使用二进制计数制，数的符号用0和1表示，小数点则隐含，不占位置。</p><p>机器数有无符号数和带符号数之分。</p><ul><li><p>无符号数表示正数，没有符号位。</p></li><li><p>带符号数最高位为符号位，正数符号位为0，负数符号位为1。</p></li></ul><p><strong>真值</strong>：机器数对应的实际数值。</p><h2 id="原码、反码、补码" tabindex="-1"><a class="header-anchor" href="#原码、反码、补码"><span>原码、反码、补码</span></a></h2><p><strong>正数</strong>：原码=反码=补码</p><p><strong>负数</strong>：原码是绝对值的原码，然后把最高位（符号位）改为1；反码=（除符号位外）原码按位取反；补码=（除符号位外）反码+1。</p><p><strong>0</strong>：分为 +0 和 -0</p><ul><li>+0：原码：0000 0000；反码：0000 0000；补码：0000 0000</li><li>-0：原码：1000 0000；反码：1111 1111；补码：0000 0000（溢出后舍弃最高位）</li></ul><h2 id="移码" tabindex="-1"><a class="header-anchor" href="#移码"><span>移码</span></a></h2><p>补码首位（即符号位）取反。</p><p>移码用作浮点运算的阶码。</p><h2 id="机器字长为n时-各种码制的表示范围-定点整数" tabindex="-1"><a class="header-anchor" href="#机器字长为n时-各种码制的表示范围-定点整数"><span>机器字长为n时，各种码制的表示范围（定点整数）</span></a></h2><p><strong>原码</strong>：n位数最高位是符号位，剩下（n-1）位表示数值大小，此时可表示 2n-1-1 个数，所以最小负数是 -（2n-1-1）。同理，最大正数为 2n-1-1。即原码的表示范围是 -(2n-1-1)~ +(2n-1-1) 。</p><p><strong>反码</strong>：和原码一样，反码的表示范围也是 -(2n-1-1)~ +(2n-1-1) 。</p><p><strong>补码</strong>：+0、-0的反码都是 0000 0000，所以补码的表示范围是 -(2n-1)~ +(2n-1-1)</p><p>补码参考：</p><ul><li><p><a href="https://blog.csdn.net/boomandrice/article/details/126794706" target="_blank" rel="noopener noreferrer">关于进制补码的八位取值范围为什么是-128~127和补码-128的求取_补码为什么是-128到127-CSDN博客</a>、</p></li><li><p><a href="https://blog.csdn.net/Brave_Runer/article/details/106512781" target="_blank" rel="noopener noreferrer">为什么用二进制补码所能表示的数据范围比原码多一个数据单位（为什么8位二进制的补码取值范围是-128~127）_补码取值范围为什么大一位-CSDN博客</a>。</p></li></ul><p><strong>移码</strong>：+0、-0的反码一样， 所以移码也一样。所以移码的表示范围和补码一样，都是 -(2n-1)~ +(2n-1-1) 。</p><h2 id="机器字长为n时-各种码制的表示范围-定点小数" tabindex="-1"><a class="header-anchor" href="#机器字长为n时-各种码制的表示范围-定点小数"><span>机器字长为n时，各种码制的表示范围（定点小数）</span></a></h2><p>参考链接：（<a href="https://www.zhihu.com/question/50758554" target="_blank" rel="noopener noreferrer">定点小数的取值范围是怎么推算出来的？ - 知乎 (zhihu.com)</a>）</p><p>比如 0011 0011 是一个8位原码，此时它是一个整数，小数点位于最右侧（可以看做0011 0011.0），把它化为小数是 0.011 0011（最高位是符号位），数据向右移动了 n-1 位（相当于小数点向左移动了 n-1 位）。数据右移=小数点左移=除以2n-1，</p><p><strong>所以定点小数的表示范围就是【整数的表示范围除以2n-1】</strong></p><p>整数原码范围：-(2n-1-1)~ +(2n-1-1) ，<strong>定点小数原码</strong>范围：-(1-1/2n-1) , 1/2n-1可以表示为2-(n-1)，所以范围是 -(1-2-(n-1))~+(1-2-(n-1))</p><p>同理，整数反码范围： -(2n-1-1)~ +(2n-1-1)，<strong>定点小数反码</strong>范围 -(1-2-(n-1))~+(1-2-(n-1))</p><p>同理，整数补码范围： -(2n-1)~ +(2n-1-1) ，<strong>定点小数补码</strong>范围 -1~+(1-2-(n-1))</p><p>同理，移码补码范围： -(2n-1)~ +(2n-1-1) ，<strong>定点小数移码</strong>范围 -1~+(1-2-(n-1))</p><p><img src="'+a+'" alt="alt text"></p><h2 id="浮点数运算" tabindex="-1"><a class="header-anchor" href="#浮点数运算"><span>浮点数运算</span></a></h2><p><strong>数据右移=小数点左移=除以2n-1</strong></p><p>浮点数的表示方法是 <strong>尾数*2阶码</strong>，尾数是纯小数，阶码是纯整数。正数表示为0.1xxxx，负数表示为1.0xxxx</p><ul><li><p><strong>对阶</strong>：使两个数的阶码相同，<strong>小阶向大阶看齐</strong>，较小阶码增加几位，尾数就右移几位。</p></li><li><p><strong>尾数计算</strong>：相加，如果是减法则加负数；</p></li><li><p><strong>结果规格化</strong>：即尾数规格化，带符号数尾数转换为1.0xxx或0.1xxx。</p></li></ul><p>小阶向大阶看齐 例子：</p><ul><li>0101，数据左移两位 = 乘以2^2=0100，丢失高位，不能忍受</li><li>数据右移两位 = 除以2^2=0001，丢失低位，只影响精度，可以忍受</li></ul>',35)]))}const g=e(l,[["render",o]]),c=JSON.parse('{"path":"/article-bug/cs_basic/%E5%8E%9F%E7%A0%81_%E5%8F%8D%E7%A0%81_%E8%A1%A5%E7%A0%81_%E7%A7%BB%E7%A0%81%E5%92%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E5%AF%B9%E9%98%B6.html","title":"原码、反码、补码、移码表示范围、浮点数对阶","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"原码、反码、补码","slug":"原码、反码、补码","link":"#原码、反码、补码","children":[]},{"level":2,"title":"移码","slug":"移码","link":"#移码","children":[]},{"level":2,"title":"机器字长为n时，各种码制的表示范围（定点整数）","slug":"机器字长为n时-各种码制的表示范围-定点整数","link":"#机器字长为n时-各种码制的表示范围-定点整数","children":[]},{"level":2,"title":"机器字长为n时，各种码制的表示范围（定点小数）","slug":"机器字长为n时-各种码制的表示范围-定点小数","link":"#机器字长为n时-各种码制的表示范围-定点小数","children":[]},{"level":2,"title":"浮点数运算","slug":"浮点数运算","link":"#浮点数运算","children":[]}],"git":{"updatedTime":1749695653000,"contributors":[{"name":"twoflowers","username":"","email":"1292548615@qq.com","commits":1}],"changelog":[{"hash":"db4a1e0e95b2a9a03470c7940daca8c54c2c3a13","time":1749695653000,"email":"1292548615@qq.com","author":"twoflowers","message":"cs-basic笔记整理完成"}]},"filePathRelative":"article-bug/cs_basic/原码_反码_补码_移码和浮点数对阶.md"}');export{g as comp,c as data};
