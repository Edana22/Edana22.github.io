import{_ as s,c as e,d as a,o as t}from"./app-DoO5dwbX.js";const n={};function l(d,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h2 id="《重构-第-2-版-改善既有代码的设计》" tabindex="-1"><a class="header-anchor" href="#《重构-第-2-版-改善既有代码的设计》"><span>《重构（第 2 版） : 改善既有代码的设计》</span></a></h2><div class="hint-container note"><p class="hint-container-title">函数命名:以它“做什么”来命名，而不是以它“怎么做”来命名。</p><p>一个改进函数名字的好方法：先写一句注释描述这个函数的用途，再把这句注释变成函数的名字。</p></div><div class="hint-container note"><p class="hint-container-title">每当看见一段代码在同时处理两件不同的事，我就想把它拆分成各自独立的模块，因为这样到了需要修改的时候，我就可以单独处理每个主题，而不必同时在脑子里考虑两个不同的主题。</p><ul><li>最简洁的拆分方法之一，就是把一大段行为分成顺序执行的两个阶段。</li><li>你常能见到一些身兼多职的循环，它们一次做了两三件事，不为别的， 就因为这样可以只循环一次。但如果你在一次循环中做了两件不同的事，那么每当需要修改循环时，你都得同时理解这两件事情。</li></ul></div><div class="hint-container note"><p class="hint-container-title">分解条件表达式。</p><ul><li>在带有复杂条件逻辑的函数中，代码（包括检查条件分支的代码和真正实现功能的代码）会告诉我发生的事，但常常让我弄不清楚为什么会发生这样的事。</li><li>对于条件逻辑，将每个分支条件分解成新函数还可以突出条件逻辑，更清楚地表明每个分支的作用，并且突出每个分支的原因。</li></ul></div><div class="hint-container note"><p class="hint-container-title">将查询函数和修改函数分离。</p></div><h2 id="《javascript-高级程序设计-第-2-版》" tabindex="-1"><a class="header-anchor" href="#《javascript-高级程序设计-第-2-版》"><span>《JavaScript 高级程序设计:第 2 版》</span></a></h2><div class="hint-container note"><p class="hint-container-title">检测类型</p><ul><li>检测基础数据类型 <code>typeof</code> ：<code>String, Number, Boolean, undefined</code> （typeof &#39;str&#39;）</li><li>检测引用类型 <code>instanceof</code> : <code>person instanceof Array/Object/RegExp</code>（引用类型 instanceof Object 会始终返回 true，基本类型 instanceof Object 会始终返回 false）</li><li>避免和 <code>null</code> 比较。改为 <code>typeof / instanceof</code>；如果是希望对象包含某个特定的方法名，则使用 <code>typeof</code> 确保指定名字的方法存在于对象上。</li><li>代码中的 <code>null</code> 比较越少，就越容易确定代码的目的，并消除不必要的错误。</li></ul></div><div class="hint-container note"><p class="hint-container-title">访问变量属性</p><ul><li>点表示法：只可以使用字符串 <code>person.name</code></li><li>方括号语法：可以使用变量 <code>let personName =name; person[personName]</code></li><li>通常，除非必须使用变量来访问属性，否则我们建议使用点表示法。</li></ul></div><div class="hint-container note"><p class="hint-container-title">所有对象都有 <code>toLocaleString(), toString(), valueOf()</code> 方法。</p></div><div class="hint-container note"><p class="hint-container-title">重排序方法： <code>reverse(), sort()</code></p><ul><li>默认情况下，<code>sort()</code> 按照升序排列数组项。<code>sort() </code>会调用每个数组项的 <code>toString()</code> 方法，然后比较得到的字符串并排序，即使数组中的每一项都是数值，<code>sort()</code> 比较的也是字符串。</li><li>因此 <code>sort() </code>可以接收一个函数作为参数，以便我们指定哪个值排在前面。</li></ul></div><div class="hint-container note"><p class="hint-container-title">在 <code>javascript</code> 中，没有任何代码是立刻执行的，但一旦进程空闲则尽快执行。</p><ul><li>如设定一个 150ms 后执行的定时器不代表 150ms 后代码立即执行，它表示代码会在 150ms 后被加入到队列中。如果这个时间点上，队列中没有其它东西，那么这段代码就会被执行，表面上看上去好像代码就在精确指定的时间点上执行了。其它情况下，代码可能明显地等待更长时间才执行。</li></ul></div><div class="hint-container note"><p class="hint-container-title">函数节流背后的基本思想是指：某些代码不可以在没有间断的情况连续重复执行。</p><ul><li>函数节流在 <code>resize</code> 中最常用。</li></ul></div><div class="hint-container note"><p class="hint-container-title">变量和函数命名</p><ul><li>变量名应为名词，如 <code>car, person</code>。</li><li>函数名应该以动词开头，如 <code>getName()</code>。 返回布尔类型的函数一般以 <code>is</code> 开头，如 <code>isEnable()</code>。</li><li>变量和函数都应该使用合乎逻辑的名字，不要担心长度，长度问题可以通过后处理和雅俗来缓解。</li></ul></div><div class="hint-container note"><p class="hint-container-title">原生的方法比较快：只要有可能，使用原生方法而不是自己重写一个。（原生方法是 <code>c/c++</code>写的，比 <code>js</code> 的快很多。</p></div><div class="hint-container note"><p class="hint-container-title"><code>switch</code> 语句较快：还可以通过将 <code>case</code> 语句按照出现概率从大到小来进一步优化 <code>switch</code> 语句。</p></div><div class="hint-container note"><p class="hint-container-title">位运算符比较快： 可以选择性地用位运算代替算术运算，如取模、逻辑与、逻辑或等。</p></div><div class="hint-container note"><p class="hint-container-title"><code>map(), filter(), some(), every(), forEach()</code> 都可以让数组的处理变得更简单。</p></div><div class="hint-container note"><p class="hint-container-title">解构赋值： 当一个对象字面量出现在等号左边时，就认为它是一个解构赋值。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">color</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">red</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //一次给 2 个变量赋值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //交换两个变量的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,18)]))}const h=s(n,[["render",l]]),r=JSON.parse('{"path":"/frontend_basic/bzyh12s2/","title":"《重构》、《js高级程序设计》一些笔记知识点","lang":"zh-CN","frontmatter":{"title":"《重构》、《js高级程序设计》一些笔记知识点","createTime":"2025/07/30 11:03:20","permalink":"/frontend_basic/bzyh12s2/"},"readingTime":{"minutes":4.04,"words":1212},"git":{"createdTime":1753950001000,"updatedTime":1753950001000,"contributors":[{"name":"twoflowers","username":"","email":"1292548615@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/51a398cd538d08b052e061e4b9f2c3353a7fae1d5406ef128cad6096d91bd325?d=retro"}]},"filePathRelative":"notes/frontend_basic/2.js_debug/0.《重构》、《js高级程序设计》一些笔记知识点.md","headers":[]}');export{h as comp,r as data};
